"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RectLabelNodeView = void 0;
var core_1 = require("@logicflow/core");
var RectLabelNodeView = /** @class */ (function (_super) {
    __extends(RectLabelNodeView, _super);
    function RectLabelNodeView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RectLabelNodeView.prototype.getLabelShape = function () {
        var _a = this.props.model, x = _a.x, y = _a.y, width = _a.width, height = _a.height, properties = _a.properties;
        return (0, core_1.h)('text', {
            x: x - width / 2 + 5,
            y: y - height / 2 + 16,
            fontSize: 12,
            fill: 'blue',
        }, properties.moreText);
    };
    RectLabelNodeView.prototype.getShape = function () {
        var _a = this.props.model, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        var style = this.props.model.getNodeStyle();
        // todo: 将basic-shape对外暴露，在这里可以直接用。现在纯手写有点麻烦。
        return (0, core_1.h)('g', {}, [
            (0, core_1.h)('rect', __assign(__assign({}, style), { fill: '#FFFFFF', x: x - width / 2, y: y - height / 2 })),
            this.getLabelShape(),
        ]);
    };
    return RectLabelNodeView;
}(core_1.RectNode));
exports.RectLabelNodeView = RectLabelNodeView;
