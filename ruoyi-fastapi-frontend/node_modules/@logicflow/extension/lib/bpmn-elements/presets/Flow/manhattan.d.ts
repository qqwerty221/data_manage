declare class NodeBase {
    x: any;
    y: any;
    G: number;
    H: number;
    isProcessed: boolean;
    connection: any;
    from: any;
    constructor(x: number, y: number);
    get F(): number;
    setProcessed(): void;
    setConnection(connection: any): void;
    setFrom(from: any): void;
    setG(g: number): void;
    setH(h: number): void;
    getManhattanDistanceTo(point: {
        x: number;
        y: number;
    }): number;
}
export declare class PriorityQueue {
    heap: any[];
    constructor();
    enqueue(node: {
        x: never;
        y: never;
    }, priority: number): void;
    dequeue(): any;
    bubbleUp(index: number): void;
    sinkDown(index: number): void;
    isEmpty(): boolean;
}
export declare function getOrient(start: NodeBase, end: NodeBase): string;
export declare function ManhattanLayout(startAnchor: any, endAnchor: any, startNode: {
    bbox: any;
}, endNode: {
    bbox: any;
}, offset: any): NodeBase[] | undefined;
export {};
