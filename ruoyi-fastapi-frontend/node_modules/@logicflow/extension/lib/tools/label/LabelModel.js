"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LabelModel = void 0;
var core_1 = require("@logicflow/core");
var lodash_es_1 = require("lodash-es");
// export type ILabelConfig = {}
var createUuid = core_1.LogicFlowUtil.createUuid;
var LabelModel = /** @class */ (function () {
    function LabelModel(config, element, graphModel) {
        var _a;
        this.type = 'label'; // 目前写死，后续可以根据业务需求进行扩展
        this.content = '';
        this.value = '';
        this.style = {};
        this.vertical = false; // 文字是否垂直显示
        this.editable = true; // label 是否可编辑
        this.draggable = true; // label 是否可拖拽
        this.textOverflowMode = 'default'; // Label 节点的文本溢出模式
        this.element = element;
        this.graphModel = graphModel;
        this.id = (_a = config.id) !== null && _a !== void 0 ? _a : createUuid();
        this.initLabelData(config);
    }
    LabelModel.prototype.initLabelData = function (config) {
        (0, lodash_es_1.assign)(this, config);
    };
    LabelModel.prototype.getData = function () {
        return {
            id: this.id,
            x: this.x,
            y: this.y,
            type: 'label',
            content: this.content,
            value: this.value,
            rotate: this.rotate,
            style: (0, core_1.toJS)(this.style),
            draggable: this.draggable,
            editable: this.editable,
            labelWidth: this.labelWidth,
            textOverflowMode: this.textOverflowMode,
            vertical: this.vertical,
        };
    };
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "x", void 0);
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "y", void 0);
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "content", void 0);
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "value", void 0);
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "rotate", void 0);
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "style", void 0);
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "zIndex", void 0);
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "vertical", void 0);
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "editable", void 0);
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "draggable", void 0);
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "labelWidth", void 0);
    __decorate([
        core_1.observable
    ], LabelModel.prototype, "textOverflowMode", void 0);
    return LabelModel;
}());
exports.LabelModel = LabelModel;
exports.default = LabelModel;
