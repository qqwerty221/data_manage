"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyCanvas = exports.updateImageSource = exports.updateBackgroundImageWithBase64Image = exports.updateImageSrcOrHrefWithBase64Image = exports.convertImageToBase64 = exports.isTextPlainBase64 = void 0;
/**
 * 图片缓存, 已请求过的图片直接从缓存中获取
 */
var imageCache = {};
/**
 * 当获取图片失败时会返回失败信息，是 text/plain 类型的数据
 * @param str - 图片内容
 * @returns
 */
function isTextPlainBase64(str) {
    return str.startsWith('data:text/plain');
}
exports.isTextPlainBase64 = isTextPlainBase64;
/**
 * 将网络图片转为 base64
 * @param url - 图片地址
 * @returns
 */
function convertImageToBase64(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (imageCache[url]) {
                return [2 /*return*/, imageCache[url]];
            }
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    try {
                        fetch(url)
                            .then(function (response) { return response.blob(); })
                            .then(function (blob) {
                            var reader = new FileReader();
                            reader.onloadend = function () {
                                resolve((imageCache[url] = reader.result));
                            };
                            reader.onerror = reject;
                            reader.readAsDataURL(blob);
                        })
                            .catch(function () {
                            resolve((imageCache[url] = url));
                        });
                    }
                    catch (error) {
                        // 如果转换失败，后续大概率仍然会失败，因此直接缓存
                        return (imageCache[url] = url);
                    }
                })];
        });
    });
}
exports.convertImageToBase64 = convertImageToBase64;
/**
 * 使用 base64 的图片替换 img 标签的 src 或 image 标签的 href
 * @param node - html 节点或 svg 节点
 */
function updateImageSrcOrHrefWithBase64Image(node, attrName) {
    return __awaiter(this, void 0, void 0, function () {
        var url, base64Image, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    url = node.getAttribute(attrName) || '';
                    // 已经是 base64 图片，不需要处理
                    if (url.startsWith('data:')) {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, convertImageToBase64(url)];
                case 1:
                    base64Image = _a.sent();
                    if (isTextPlainBase64(base64Image)) {
                        return [2 /*return*/];
                    }
                    node.setAttribute(attrName, base64Image);
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    console.error(error_1);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.updateImageSrcOrHrefWithBase64Image = updateImageSrcOrHrefWithBase64Image;
/**
 * 使用 base64 的图片替换背景图片
 * @param node - html 节点
 * @param styleAttr - 样式属性名称
 */
function updateBackgroundImageWithBase64Image(node, url) {
    return __awaiter(this, void 0, void 0, function () {
        var base64Image, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    // 已经是 base64 图片，不需要处理
                    if (url.startsWith('data:')) {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, convertImageToBase64(url)];
                case 1:
                    base64Image = _a.sent();
                    if (isTextPlainBase64(base64Image)) {
                        return [2 /*return*/];
                    }
                    node.style.backgroundImage = "url(".concat(base64Image, ")");
                    return [3 /*break*/, 3];
                case 2:
                    error_2 = _a.sent();
                    console.error(error_2);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.updateBackgroundImageWithBase64Image = updateBackgroundImageWithBase64Image;
/**
 * 更新图片数据
 * @param node - 节点
 */
function updateImageSource(node) {
    return __awaiter(this, void 0, void 0, function () {
        var nodes, nodePtr, promises, _a, background, backgroundImage, backgroundUrlMatch, imageUrl, backgroundImageUrlMatch, imageUrl;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    nodes = [node];
                    promises = [];
                    while (nodes.length) {
                        nodePtr = nodes.shift();
                        if (nodePtr.children.length) {
                            nodes.push.apply(nodes, __spreadArray([], __read(nodePtr.children), false));
                        }
                        if (nodePtr instanceof HTMLElement) {
                            _a = nodePtr.style, background = _a.background, backgroundImage = _a.backgroundImage;
                            backgroundUrlMatch = background.match(/url\(["']?(.*?)["']?\)/);
                            if (backgroundUrlMatch && backgroundUrlMatch[1]) {
                                imageUrl = backgroundUrlMatch[1];
                                promises.push(updateBackgroundImageWithBase64Image(nodePtr, imageUrl));
                            }
                            backgroundImageUrlMatch = backgroundImage.match(/url\(["']?(.*?)["']?\)/);
                            if (backgroundImageUrlMatch && backgroundImageUrlMatch[1]) {
                                imageUrl = backgroundImageUrlMatch[1];
                                promises.push(updateBackgroundImageWithBase64Image(nodePtr, imageUrl));
                            }
                        }
                        // 如果有 img 和 image 标签，尝试将 src 和 href 替换为 base64 图片
                        if (nodePtr instanceof HTMLImageElement) {
                            promises.push(updateImageSrcOrHrefWithBase64Image(nodePtr, 'src'));
                        }
                        else if (nodePtr instanceof SVGImageElement) {
                            promises.push(updateImageSrcOrHrefWithBase64Image(nodePtr, 'href'));
                        }
                    }
                    return [4 /*yield*/, Promise.all(promises)];
                case 1:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.updateImageSource = updateImageSource;
/**
 * 重新复制canvas 用于在不裁剪原canvas的基础上通过拉伸方式达到自定义宽高目的
 * @param originCanvas HTMLCanvasElement
 * @param targetWidth number
 * @param targetHeight number
 */
function copyCanvas(originCanvas, targetWidth, targetHeight) {
    var newCanvas = document.createElement('canvas');
    newCanvas.width = targetWidth;
    newCanvas.height = targetHeight;
    var newCtx = newCanvas.getContext('2d');
    if (newCtx) {
        // 注意: 自定义宽高时，可能会拉伸图形，这时候padding也会被拉伸导致不准确
        newCtx.drawImage(originCanvas, 0, 0, originCanvas.width, originCanvas.height, 0, 0, targetWidth, targetHeight);
    }
    return newCanvas;
}
exports.copyCanvas = copyCanvas;
