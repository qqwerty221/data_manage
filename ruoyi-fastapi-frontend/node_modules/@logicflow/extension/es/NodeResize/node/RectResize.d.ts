import LogicFlow, { h, RectNode, RectNodeModel, GraphModel } from '@logicflow/core';
import NodeConfig = LogicFlow.NodeConfig;
export type ResizeNodeConfig = NodeConfig & {
    properties: {
        nodeSize: {
            width: number;
            height: number;
        };
    } & Record<string, unknown>;
};
export type PCTResizeParams = {
    ResizePCT: {
        widthPCT: number;
        heightPCT: number;
    };
    ResizeBasis: {
        basisWidth: number;
        basisHeight: number;
    };
    ScaleLimit: {
        maxScaleLimit: number;
        minScaleLimit: number;
    };
};
export declare class RectResizeModel extends RectNodeModel {
    PCTResizeInfo?: PCTResizeParams;
    minWidth: number;
    minHeight: number;
    maxWidth: number;
    maxHeight: number;
    constructor(data: ResizeNodeConfig, graphModel: GraphModel);
    initNodeData(data: any): void;
    getOutlineStyle(): LogicFlow.OutlineTheme;
    getResizeOutlineStyle(): {
        fill: string;
        stroke: string;
        strokeWidth: number;
        strokeDasharray: string;
    };
    getControlPointStyle(): {
        width: number;
        height: number;
        fill: string;
        stroke: string;
    };
    enableProportionResize(turnOn?: boolean): void;
}
export declare class RectResizeView extends RectNode {
    getControlGroup(): h.JSX.Element | null;
    getResizeShape(): h.JSX.Element | null;
    getShape(): h.JSX.Element;
}
export declare const RectResize: {
    type: string;
    view: typeof RectResizeView;
    model: typeof RectResizeModel;
};
export default RectResize;
