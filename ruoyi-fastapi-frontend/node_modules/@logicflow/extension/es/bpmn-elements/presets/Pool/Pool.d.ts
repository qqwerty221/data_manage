/**
 * 泳道节点
 */
import LogicFlow from '@logicflow/core';
import { GroupNode, GroupNodeModel } from '../../../materials/group';
export declare class HorizontalLaneModel extends GroupNodeModel {
    initNodeData(data: LogicFlow.NodeConfig & Record<'width' | 'height', number>): void;
    setAttributes(): void;
    getTextStyle(): {
        [x: string]: unknown;
        fill?: string | undefined;
        stroke?: string | undefined;
        strokeWidth?: number | undefined;
        radius?: number | undefined;
        rx?: number | undefined;
        ry?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        path?: string | undefined;
        overflowMode?: "default" | "autoWrap" | "ellipsis" | undefined;
        textWidth?: number | undefined;
        background?: LogicFlow.CommonTheme | undefined;
        wrapPadding?: string | undefined;
        color?: string | undefined;
        fontSize: number;
        lineHeight?: number | undefined;
        textAnchor?: "middle" | "start" | "end" | undefined;
        dominantBaseline?: "middle" | "central" | "auto" | "text-bottom" | "alphabetic" | "ideographic" | "mathematical" | "hanging" | "text-top" | undefined;
    };
    foldGroup(isFolded: boolean): void;
    resizePool(resizeId?: string, newNodeSize?: {
        x: number;
        width: number;
    }): void;
    resizeChildren({ resizeDir, deltaHeight }: {
        resizeDir?: string | undefined;
        deltaHeight?: number | undefined;
    }): void;
    addChild(childId: any): void;
    addChildAbove({ x, y, width, height }: any): void;
    addChildBelow({ x, y, width, height }: any): void;
    deleteChild(childId: any): void;
}
export declare class HorizontalLaneView extends GroupNode {
    getResizeShape(): import("preact").VNode<import("preact").ClassAttributes<HTMLElement>>;
}
declare const PoolNode: {
    type: string;
    view: typeof HorizontalLaneView;
    model: typeof HorizontalLaneModel;
};
export default PoolNode;
