var SelectionSelect = /** @class */ (function () {
    function SelectionSelect(_a) {
        var lf = _a.lf;
        var _this = this;
        this.disabled = true;
        this.isDefaultStopMoveGraph = false;
        this.isWholeNode = true;
        this.isWholeEdge = true;
        this.draw = function (ev) {
            var _a = _this.lf.getPointByClient(ev.clientX, ev.clientY).domOverlayPosition, x1 = _a.x, y1 = _a.y;
            _this.endPoint = {
                x: x1,
                y: y1,
            };
            if (_this.startPoint) {
                var _b = _this.startPoint, x = _b.x, y = _b.y;
                var left = x;
                var top_1 = y;
                var width = x1 - x;
                var height = y1 - y;
                if (x1 < x) {
                    left = x1;
                    width = x - x1;
                }
                if (y1 < y) {
                    top_1 = y1;
                    height = y - y1;
                }
                if (_this.wrapper) {
                    _this.wrapper.style.left = "".concat(left, "px");
                    _this.wrapper.style.top = "".concat(top_1, "px");
                    _this.wrapper.style.width = "".concat(width, "px");
                    _this.wrapper.style.height = "".concat(height, "px");
                }
            }
        };
        this.drawOff = function () {
            var _a;
            document.removeEventListener('mousemove', _this.draw);
            document.removeEventListener('mouseup', _this.drawOff);
            if (_this.wrapper) {
                _this.wrapper.oncontextmenu = null;
                (_a = _this.container) === null || _a === void 0 ? void 0 : _a.removeChild(_this.wrapper);
            }
            if (_this.startPoint && _this.endPoint) {
                var _b = _this.startPoint, x = _b.x, y = _b.y;
                var _c = _this.endPoint, x1 = _c.x, y1 = _c.y;
                // 返回框选范围，左上角和右下角的坐标
                var lt = [Math.min(x, x1), Math.min(y, y1)];
                var rb = [Math.max(x, x1), Math.max(y, y1)];
                _this.lf.emit('selection:selected-area', {
                    topLeft: lt,
                    bottomRight: rb,
                });
                // 选区太小的情况就忽略
                if (Math.abs(x1 - x) < 10 && Math.abs(y1 - y) < 10) {
                    return;
                }
                var elements = _this.lf.graphModel.getAreaElement(lt, rb, _this.isWholeEdge, _this.isWholeNode, true);
                var _d = _this.lf.graphModel, dynamicGroup_1 = _d.dynamicGroup, group_1 = _d.group;
                var nonGroupedElements_1 = [];
                elements.forEach(function (element) {
                    // 如果节点属于分组，则不选中节点，此处兼容旧版 Group 插件
                    if (group_1 && group_1.getNodeGroup(element.id)) {
                        return;
                    }
                    if (dynamicGroup_1 && dynamicGroup_1.getGroupByNodeId(element.id)) {
                        return;
                    }
                    _this.lf.selectElementById(element.id, true);
                    nonGroupedElements_1.push(element);
                });
                _this.lf.emit('selection:selected', {
                    elements: nonGroupedElements_1,
                    leftTopPoint: lt,
                    rightBottomPoint: rb,
                });
            }
        };
        this.lf = lf;
        // 初始化isDefaultStopMoveGraph取值
        var stopMoveGraph = lf.getEditConfig().stopMoveGraph;
        this.isDefaultStopMoveGraph = stopMoveGraph;
        // TODO: 有没有既能将方法挂载到lf上，又能提供类型提示的方法？
        lf.openSelectionSelect = function () {
            _this.openSelectionSelect();
        };
        lf.closeSelectionSelect = function () {
            _this.closeSelectionSelect();
        };
    }
    SelectionSelect.prototype.render = function (lf, domContainer) {
        var _this = this;
        this.container = domContainer;
        lf.on('blank:mousedown', function (_a) {
            var e = _a.e;
            var config = lf.getEditConfig();
            // 鼠标控制滚动移动画布的时候，不能选区。
            if (!config.stopMoveGraph || _this.disabled) {
                return;
            }
            // 禁用右键框选，修复可能导致画布出现多个框选框不消失的问题，见https://github.com/didi/LogicFlow/issues/985
            var isRightClick = e.button === 2;
            if (isRightClick) {
                return;
            }
            var _b = lf.getPointByClient(e.clientX, e.clientY).domOverlayPosition, x = _b.x, y = _b.y;
            _this.startPoint = {
                x: x,
                y: y,
            };
            _this.endPoint = {
                x: x,
                y: y,
            };
            var wrapper = document.createElement('div');
            wrapper.className = 'lf-selection-select';
            wrapper.oncontextmenu = function prevent(ev) {
                ev.preventDefault();
            };
            wrapper.style.top = "".concat(_this.startPoint.y, "px");
            wrapper.style.left = "".concat(_this.startPoint.x, "px");
            domContainer.appendChild(wrapper);
            _this.wrapper = wrapper;
            document.addEventListener('mousemove', _this.draw);
            document.addEventListener('mouseup', _this.drawOff);
        });
    };
    /**
     * 设置选中的灵敏度
     * @param isWholeEdge 是否要边的起点终点都在选区范围才算选中。默认true
     * @param isWholeNode 是否要节点的全部点都在选区范围才算选中。默认true
     */
    SelectionSelect.prototype.setSelectionSense = function (isWholeEdge, isWholeNode) {
        if (isWholeEdge === void 0) { isWholeEdge = true; }
        if (isWholeNode === void 0) { isWholeNode = true; }
        this.isWholeEdge = isWholeEdge;
        this.isWholeNode = isWholeNode;
    };
    /**
     * 开启选区
     */
    SelectionSelect.prototype.openSelectionSelect = function () {
        var stopMoveGraph = this.lf.getEditConfig().stopMoveGraph;
        if (!stopMoveGraph) {
            this.isDefaultStopMoveGraph = false;
            this.lf.updateEditConfig({
                stopMoveGraph: true,
            });
        }
        this.open();
    };
    /**
     * 关闭选区
     */
    SelectionSelect.prototype.closeSelectionSelect = function () {
        if (!this.isDefaultStopMoveGraph) {
            this.lf.updateEditConfig({
                stopMoveGraph: false,
            });
        }
        this.close();
    };
    SelectionSelect.prototype.open = function () {
        this.disabled = false;
    };
    SelectionSelect.prototype.close = function () {
        this.disabled = true;
    };
    SelectionSelect.pluginName = 'selectionSelect';
    return SelectionSelect;
}());
export { SelectionSelect };
export default SelectionSelect;
